[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hobbies"
version = "0.1.0"
description = "Standardized project configuration for hobbies"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "assetutilities @git+https://github.com/username/assetutilities.git"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
]
docs = [
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
"Homepage" = "https://github.com/username/hobbies"
"Bug Tracker" = "https://github.com/username/hobbies/issues"
"Documentation" = "https://github.com/username/hobbies#readme"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--cov=src --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.uv]
# UV environment configuration
python = "3.11"
system = false
seed = true
compile = true

[tool.uv.pip]
index-url = "https://pypi.org/simple"
extra-index-url = []
no-cache = false
pre = false

# MANDATORY: Parallel Processing Configuration
[tool.parallel]
enabled = true
max_workers = 5
use_threading = false  # Use multiprocessing for CPU-bound tasks
use_asyncio = true     # Use asyncio for I/O-bound tasks
batch_size = 10

[tool.parallel.rules]
# Define when to use parallel processing
file_operations = "always"      # File reading/writing
http_requests = "always"        # API calls
data_processing = "threshold"   # Based on data size
threshold_size = 1000           # Items before parallel kicks in

[tool.scripts]
# Common scripts that use parallel processing
test = "pytest -n auto"
format = "black . && isort ."
lint = "flake8 . & mypy . & pylint ."
install = "uv pip install -e ."
dev-install = "uv pip install -e .[dev]"
